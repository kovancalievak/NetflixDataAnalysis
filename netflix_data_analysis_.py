# -*- coding: utf-8 -*-
"""Netflix Data Analysis  .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JtCe2PROLC6kCbdY-V6lvukq_dY3dxOh
"""

import pandas as pd
#visualization library
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('netflix_titles.csv')
df.head()

df.shape

df.isnull().sum() #checking for null values

import numpy as np

#We replaced all the Nan values in the country column with United States as Netflix was created in the USA and every show is aired on Netflix US. So instead of dropping the whole column we just replaced the values in it in order to save our data.
df['country'].replace(np.nan, 'United States',inplace  = True)

df.isnull().sum() #checking for null values

df['director'].replace(np.nan, 'No Director',inplace=True)
df['cast'].replace(np.nan, 'No Cast',inplace=True)
#df['country'].replace(np.nan, 'Not Specify',inplace=True)
df.isnull().sum()

df.shape

df = df.dropna()
df.isnull().sum()

df.shape

df['rating'].value_counts()

df['listed_in'].value_counts()

df.isnull().sum()

df['type'].value_counts()

sns.countplot(x='type',data = df) #looking at number of Movies and TV shows

import plotly.graph_objects as go
import plotly.express as px

movie_type_counts = df['type'].value_counts()

# Create the pie chart
fig = go.Figure(data=go.Pie(labels=movie_type_counts.index, values=movie_type_counts.values))

# Set the dark background and white font color
fig.update_layout(
    title='Distribution',  # Chart title
)
fig.update_traces()
fig.show()

plt.figure(figsize = (12,8))
sns.countplot(x='rating',data = df, order=df['rating'].value_counts().index)

plt.figure(figsize = (12,8))
sns.countplot(x='rating',data = df,hue='type',order=df['rating'].value_counts().index)

top_countries = df['country'].value_counts().head(10)
# Create the treemap
fig = px.treemap(names=top_countries.index, parents=["" for _ in top_countries.index], values=top_countries.values)
# Set the dark background and white font color
fig.update_layout(
    title='Countries with Highest Number of Movies',  # Chart title
)
fig.show()

df.head()

old = df.sort_values("release_year", ascending = True) #oldest movies available on netflix
old = old[old['duration'] != ""]
old[['title', "release_year", 'country']][:15]

tag = "Stand-Up Comedy" #standup shows on Netflix
df["relevant"] = df['listed_in'].fillna("").apply(lambda x : 1 if tag.lower() in x.lower() else 0)
com = df[df["relevant"] == 1]
com[com["country"] == "United States"][["title", "country","release_year"]].head(10)

tag = "Kids' TV" #Kids TV shows on Netflix
df["relevant"] = df['listed_in'].fillna("").apply(lambda x : 1 if tag.lower() in x.lower() else 0)
com = df[df["relevant"] == 1]
com[com["country"] == "India"][["title", "country","release_year"]].head(10)

df_countries = pd.DataFrame(df.country.value_counts().reset_index().values, columns=["country", "count"])
df_countries.tail(20)

date = pd.DataFrame(df.release_year.value_counts().reset_index().values, columns=["Year", "Count"])
date.head()



plt.figure(figsize=(12,6))
df[df["type"]=="Movie"]["listed_in"].value_counts()[:10].plot(kind="barh",color="black")
plt.title("Top 10 Genres of Movies",size=18)

plt.figure(figsize=(12,6))
df[df["type"]=="TV Show"]["listed_in"].value_counts()[:20].plot(kind="barh",color="brown")
plt.title("Top 10 Genres of TV Shows",size=18)

netflix =df.copy()

df.head()

df.director.value_counts()

newdata = df.groupby('rating').size().rename_axis('Rating').reset_index(name='Count')
nd = newdata.sort_values(by ='Count', ascending=True)
nd = nd.tail(5)
nd

fil_directors = df['director'].str.split(',',expand=True).stack()
fil_directors= pd.DataFrame(fil_directors)
fil_directors.columns = ['director']
directors = fil_directors.groupby(['director']).size().reset_index(name='counts')
directors = directors.sort_values(by='counts',ascending=False)
directors = directors[directors['director'] != 'No Director']
directors = directors.head(5)
directors

fil_actors = df['cast'].str.split(',',expand=True).stack()
fil_actors= pd.DataFrame(fil_actors)
fil_actors.columns = ['cast']
actors = fil_actors.groupby(['cast']).size().reset_index(name='counts')
actors = actors.sort_values(by='counts',ascending=False)
actors = actors[actors['cast'] != 'No Cast']
actors = actors.head(5)
actors

dff = df[['type','release_year']]
dff = dff.rename(columns = {'release_year' : 'Release Year'})
dff2 = dff.groupby(['Release Year','type']).size().reset_index(name='Total Content')
dff2 = dff2[dff2['Release Year']>=2011]
dff2

dff3 = dff2[dff2['type']=='Movie']
dff3

dff4 = dff2[dff2['type']=='TV Show']
dff4

features=['title','duration','type']
seasons= df[features]
seasons['no_of_seasons']=seasons['duration'].str.replace(' Season','')
seasons['no_of_seasons']=seasons['no_of_seasons'].str.replace('s','')
seasons = seasons[seasons['type']=='TV Show']
seasons['no_of_seasons']=seasons['no_of_seasons'].astype(str).astype(int)
seasons = seasons.drop('duration', axis= 1)
seasons = seasons.sort_values('no_of_seasons', ascending=False)
seasons = seasons.head(5)
seasons